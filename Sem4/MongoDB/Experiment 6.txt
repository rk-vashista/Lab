Experiment No 6- Mongo DB

Execute Aggregation Pipeline and its operations (pipeline must contain $match,
$group, $sort, $project, $skip etc. students encourage to execute several queries to demonstrate various aggregation operators)

Database Name: Bangalore
Collection Name: Hotels

Database

db.hotels.insertMany([
  {
    name: "Biryani House",
    cuisine: "Indian",
    location: "Jayanagar",
    reviews: [
      { user: "Aarav", rating: 5, comment: "Amazing biryani!" },
      { user: "Bhavana", rating: 4, comment: "Great place!" }
    ]
  },
  {
    name: "Burger Joint",
    cuisine: "American",
    location: "Koramangala",
    reviews: [
      { user: "Chirag", rating: 3, comment: "Average burger" },
      { user: "Devika", rating: 4, comment: "Good value" }
    ]
  },
  {
    name: "Pasta House",
    cuisine: "Italian",
    location: "Rajajinagar",
    reviews: [
      { user: "Esha", rating: 5, comment: "Delicious pasta!" },
      { user: "Farhan", rating: 4, comment: "Nice ambiance" }
    ]
  },
  {
    name: "Curry Palace",
    cuisine: "Indian",
    location: "Jayanagar",
    reviews: [
      { user: "Gaurav", rating: 4, comment: "Spicy and tasty!" },
      { user: "Harini", rating: 5, comment: "Best curry in town!" }
    ]
  },
  {
    name: "Taco Stand",
    cuisine: "Mexican",
    location: "Jayanagar",
    reviews: [
      { user: "Ishaan", rating: 5, comment: "Fantastic tacos!" },
      { user: "Jaya", rating: 4, comment: "Very authentic" }
    ]
  }
])
******************************************************************************************
Query

db.hotels.aggregate([
  {
    $match: {
      location: "Jayanagar"
    }
  },
  {
    $unwind: "$reviews"
  },
  {
    $group: {
      _id: "$name",
      averageRating: { $avg: "$reviews.rating" },
      totalReviews: { $sum: 1 }
    }
  },
  {
    $sort: {
      averageRating: -1
    }
  },
  {
    $project: {
      _id: 0,
      restaurant: "$_id",
      averageRating: 1,
      totalReviews: 1
    }
  },
  {
    $skip: 1
  }
])
*******************************************************************************************************
Query Explanation

Aggregation Pipeline Explanation

$match: Filter restaurants by cuisine ("Jayanagar" location).
$unwind: Deconstruct the reviews array from each document to output a document for each review.
$group: Group the documents by restaurant name and calculate the average rating and total number of reviews.
$sort: Sort the results by average rating in descending order.
$project: Restructure the output to include only the restaurant name, average rating, and total reviews.
$skip: Skip the first document.

*****************************************************************************************************
Query Output

{
  averageRating: 4.5,
  totalReviews: 2,
  restaurant: 'Biryani House'
}

{
  averageRating: 4.5,
  totalReviews: 2,
  restaurant: 'Taco Stand'
}

************END******************************END*****************************************************
